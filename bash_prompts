
#   1. Show Happy face upon successful execution
#   This prompt is probably the most amusing one on the list, 
#   but remains useful. The idea is that as long as your commands execute successfully,
#   your prompt shows a happy face. Any time a command fails, it shows a sad face instead.
#   Code:
    PS1="\`if [ \$? = 0 ]; then echo \[\e[33m\]^_^\[\e[0m\]; else echo \[\e[31m\]O_O\[\e[0m\]; fi\`[\u@\h:\w]\\$ "

#   2. Change color on bad 
#   Here’s one of my favorites. This prompt has it all.
#   Like above, the prompt changes color if your last command failed to run successfully,
#   but it also shortens long paths and contains the bash history number of each command for easy retrieval.
#   Code:
    PROMPT_COMMAND='PS1="\[\033[0;33m\][\!]\`if [[ \$? = "0" ]]; then echo "\\[\\033[32m\\]"; else echo "\\[\\033[31m\\]"; fi\`[\u.\h: \`if [[ `pwd|wc -c|tr -d " "` > 18 ]]; then echo "\\W"; else echo "\\w"; fi\`]\$\[\033[0m\] "; echo -ne "\033]0;`hostname -s`:`pwd`\007"'


#   3. Multi lines prompt
#   If you’re the type who wants to pack your prompt full of information,
#   then here’s the one for you.
#   This one is a multi-line prompt containing date/time,
#   full path, user and host, active terminal, even file count and space usage.
#   Code:
    PS1="\n\[\033[35m\]\$(/bin/date)\n\[\033[32m\]\w\n\[\033[1;31m\]\u@\h: \[\033[1;34m\]\$(/usr/bin/tty | /bin/sed -e 's:/dev/::'): \[\033[1;36m\]\$(/bin/ls -1 | /usr/bin/wc -l | /bin/sed 's: ::g') files \[\033[1;33m\]\$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed 's/total //')b\[\033[0m\] -> \[\033[0m\]"

#   4. Color manage your prompt
#   There’s nothing particularly fancy about this prompt,
#   other than the good use of color to separate the different pieces of information.
#   As you can see, it provides time, username, hostname, and current directory. Fairly minimal but useful.
#   Code:
    PS1="\[\033[35m\]\t\[\033[m\]-\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\]\$ "

#   5. Show full path
#   This one’s a nice, clean, minimal 2-line prompt (plus a blank line at the top).
#   You’ve got your full path at the first line and pretty much just the username at the bottom.
#   If you want to remove the blank line at the start of every prompt, just take out the first “\n”.
#   Code:
    PS1="[\[\033[32m\]\w]\[\033[0m\]\n\[\033[1;36m\]\u\[\033[1;33m\]-> \[\033[0m\]"

#   6. Show background job count
#   Another nifty 2-liner, but this one’s got some info we haven’t used before.
#   The first line is the normal user@host, with full path. 
#   On the second line we’ve got history number and a count of the jobs running in the background.
#   Code:
    PS1='\[\e[1;32m\]\u@\H:\[\e[m\] \[\e[1;37m\]\w\[\e[m\]\n\[\e[1;33m\]hist:\! \[\e[0;33m\] \[\e[1;31m\]jobs:\j \$\[\e[m\] '

#   7. Display directory information
#   A very elegant and nice looking prompt design.
#   With this one we’ve got user/host, number of jobs, and date/time on the top line.
#   Below that is current directory along with number of files in that directory and their disk usage.
#   Code:
    PS1="\n\[\e[30;1m\]\[\016\]l\[\017\](\[\e[34;1m\]\u@\h\[\e[30;1m\])-(\[\e[34;1m\]\j\[\e[30;1m\])-(\[\e[34;1m\]\@ \d\[\e[30;1m\])->\[\e[30;1m\]\n\[\016\]m\[\017\]-(\[\[\e[32;1m\]\w\[\e[30;1m\])-(\[\e[32;1m\]\$(/bin/ls -1 | /usr/bin/wc -l | /bin/sed 's: ::g') files, \$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed 's/total //')b\[\e[30;1m\])--> \[\e[0m\]"
